

// These ones get turned into a new object over and over.
// let tempContainer = new WorkerContainer()
// let nodeContainer = new WorkerContainer()
// let meshContainer = new WorkerContainer()
// let verticesContainer = new WorkerContainer()
// let trisContainer = new WorkerContainer()


// const shellContainer     = new WorkerContainer()
// const textureCoordinates = new WorkerContainer()
// const masterContainer    = new WorkerContainer()


// function encaseChunk(chunkName, encasingContainer, bufferToBeEncased) {
//   encasingContainer.appendString(chunkName);
//   encasingContainer.appendInt32(bufferToBeEncased.byteLength());
//   for (const byte of new Uint8Array(bufferToBeEncased.buffer)) {
//     encasingContainer.appendInt8(byte)
//   }
// }

// function finalizeChunk(chunkName, chunkToBeFinalized) {
//   const tempChunk = new WorkerContainer()
//   tempChunk.appendString(chunkName)
//   tempChunk.appendInt32(chunkToBeFinalized.byteLength());
//   const startIndex = tempChunk.byteLength()
//   tempChunk.grow(chunkToBeFinalized.byteLength())
//   for (let i = 0; i < chunkToBeFinalized.byteLength(); i++) {
//     tempChunk.view.setInt8(i + startIndex, chunkToBeFinalized.view.getInt8(i))
//   }
//   return tempChunk
// }

// // Gives back a MESH node!
// function combineVertsTris(verts, tris) {
//   const tempChunk = new WorkerContainer()
//   tempChunk.appendString("MESH")
//   tempChunk.appendInt32(verts.byteLength() + tris.byteLength())
//   let startIndex = tempChunk.byteLength()
//   tempChunk.grow(verts.byteLength())
//   for (let i = 0; i < verts.byteLength(); i++) {
//     tempChunk.view.setInt8(i + startIndex, verts.view.getInt8(i))
//   }
//   startIndex = tempChunk.byteLength()
//   tempChunk.grow(tris.byteLength())
//   for (let i = 0; i < tris.byteLength(); i++) {
//     tempChunk.view.setInt8(i + startIndex, verts.view.getInt8(i))
//   }
//   return tempChunk
// }

// function combineMeshIntoNode(nodeNode, meshNode) {
//   const tempChunk = new WorkerContainer()
//   tempChunk.appendString("NODE")
//   tempChunk.appendInt32(nodeNode.byteLength() + meshNode.byteLength())
//   let startIndex = tempChunk.byteLength()
//   tempChunk.grow(nodeNode.byteLength())
//   for (let i = 0; i < nodeNode.byteLength(); i++) {
//     tempChunk.view.setInt8(i + startIndex, nodeNode.view.getInt8(i))
//   }
//   startIndex = tempChunk.byteLength()
//   tempChunk.grow(meshNode.byteLength())
//   for (let i = 0; i < meshNode.byteLength(); i++) {
//     tempChunk.view.setInt8(i + startIndex, meshNode.view.getInt8(i))
//   }
//   return tempChunk
// }

// function resetTempContainer() {
//   tempContainer = new WorkerContainer()
// }

// function completeInteraction(finalNode) {
//   const tempChunk = new WorkerContainer()
//   tempChunk.appendString("BB3D")
//   tempChunk.appendInt32(finalNode.byteLength() + 4)
//   tempChunk.appendInt32(1)
//   let startIndex = tempChunk.byteLength()
//   tempChunk.grow(finalNode.byteLength())
//   for (let i = 0; i < finalNode.byteLength(); i++) {
//     tempChunk.view.setInt8(i + startIndex, finalNode.view.getInt8(i))
//   }
//   return tempChunk
// }
